import { useEffect, useState, useRef } from "react";
import Echo from "laravel-echo";
import Router from "./routes";
import "react-toastify/dist/ReactToastify.css";
import Pusher from "pusher-js";
import { ToastContainer } from "react-toastify";

const notificationSoundUrl = "/explosion-42132.mp3";

const Banner = ({ notifications = [], onDelete }) => {
    const notificationList = Array.isArray(notifications) ? notifications : [];
    if (!Array.isArray(notifications)) {
        console.error("Error: notifications is not an array", notifications);
    }

    return (
        <div
            style={{
                position: "fixed",
                top: 0,
                left: 0,
                right: 0,
                backgroundColor: "#ffffff",
                color: "#000000",
                padding: "10px 15px",
                zIndex: 1000,
                boxShadow: "0 4px 20px rgba(0, 0, 0, 0.1)",
                borderRadius: "8px",
                display: notificationList.length > 0 ? "block" : "none",
                animation: "slideDown 0.5s ease-out",
                overflow: "hidden",
            }}
        >
            {notificationList.map((notification) => (
                <div
                    key={notification.id}
                    style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        marginBottom: "5px",
                        padding: "10px",
                        backgroundColor: "#f8f8f8",
                        color: "#333333",
                        borderRadius: "8px",
                        boxShadow: "0 2px 10px rgba(0, 0, 0, 0.1)",
                        animation: "fadeIn 0.5s forwards",
                    }}
                >
                    <div style={{ display: "flex", alignItems: "center" }}>
                        <i
                            className="fas fa-bell"
                            style={{
                                marginRight: "8px",
                                color: "#ff6f61",
                            }}
                        ></i>
                        <span style={{ fontWeight: "600", fontSize: "14px" }}>
              {notification.message}
            </span>
                    </div>
                    <button
                        onClick={() => onDelete(notification.id)}
                        style={{
                            background: "#ff6f61",
                            border: "none",
                            color: "#ffffff",
                            cursor: "pointer",
                            padding: "5px 8px",
                            borderRadius: "5px",
                            fontSize: "12px",
                            transition: "background 0.3s",
                        }}
                    >
                        Xóa
                    </button>
                </div>
            ))}
        </div>
    );
};

declare global {
    interface Window {
        Pusher: typeof Pusher;
    }
}

function App() {
    const [notifications, setNotifications] = useState<{
        id: number;
        message: string;
    }[]>([]);
    const [loading, setLoading] = useState(true); // Trạng thái loading
    const audioRef = useRef<HTMLAudioElement | null>(null);
    let notificationId = 0;

    useEffect(() => {
        window.Pusher = Pusher;

        const echo = new Echo({
            broadcaster: "pusher",
            key: "481e2d48d1b812127469",
            cluster: "ap1",
            forceTLS: true,
        });

        const user = localStorage.getItem("user");
        if (!user) {
            return;
        }

        let userId: number;
        try {
            const parsedUser = JSON.parse(user);
            userId = parsedUser.user.id;
        } catch (error) {
            return;
        }

        const channelName = `thong-bao`;
        const channel = echo.channel(channelName);

        channel.listen(
            "ThongBaoMoi",
            (event: { user_id: number; tieu_de: string; noi_dung: string }) => {
                if (event.user_id === userId) {
                    const toastMessage = `${event.tieu_de}: ${event.noi_dung}`;
                    const id = notificationId++;
                    setNotifications((prev) => [...prev, { id, message: toastMessage }]);

                    if (!audioRef.current) {
                        audioRef.current = new Audio(notificationSoundUrl);
                    } else {
                        audioRef.current.pause();
                        audioRef.current.currentTime = 0;
                    }

                    const playSound = async () => {
                        try {
                            if (audioRef.current) {
                                await audioRef.current.play();
                            }
                        } catch (error) {
                            console.error("Lỗi khi phát âm thanh:", error);
                        }
                    };
                    playSound();
                }
            }
        );

        // Thực hiện tải xong trang
        setTimeout(() => {
            setLoading(false); // Sau 3s sẽ ẩn hiệu ứng loading
        }, 3000);

        return () => {
            if (echo) {
                echo.leave(channelName);
            }
        };
    }, []);

    const handleDelete = (id: number) => {
        setNotifications((prev) =>
            prev.filter((notification) => notification.id !== id)
        );
    };

    return (
        <>
            {/* Optimized Christmas Loading */}
            {loading && (
                <div className="loading-screen">
                    <div className="loading-content">
                        <div className="santa"></div>
                    </div>
                </div>
            )}

            <Banner notifications={notifications} onDelete={handleDelete} />
            <Router />

            {/* Cloud Effect - Clouds floating down */}
            <div className="clouds">
                {[...Array(10)].map((_, index) => (
                    <div
                        key={index}
                        className="cloud"
                        style={{
                            left: `${Math.random() * 100}vw`, // Random position along the x-axis
                            animationDuration: `${Math.random() * 10 + 10}s`, // Random speed of falling
                            animationDelay: `${Math.random() * 5}s`, // Random delay before falling
                            opacity: `${Math.random() * 0.5 + 0.5}`, // Random opacity for depth
                            width: `${Math.random() * 200 + 100}px`, // Random cloud size
                            height: `${Math.random() * 60 + 40}px`,
                        }}
                    ></div>
                ))}
            </div>

            <style>
                {`
          body {
            background-color: #ffffff;
            font-family: 'Arial', sans-serif;
            color: black;
            overflow-x: hidden;
          }

          /* Optimized Loading */
          .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
          }

          .loading-content {
            position: relative;
            width: 100px;
            height: 100px;
            animation: spin 2s linear infinite;
          }

          .santa {
            background-color: #ff6f61;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            animation: bounce 2s ease-in-out infinite;
          }

          @keyframes bounce {
            0%, 100% {
              transform: translateY(0);
            }
            50% {
              transform: translateY(-15px);
            }
          }

          @keyframes spin {
            0% {
              transform: rotate(0deg);
            }
            100% {
              transform: rotate(360deg);
            }
          }

          /* Cloud floating animation */
          .clouds {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9999;
          }

          .cloud {
            position: absolute;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            opacity: 0.8;
            animation: floatDown 15s linear infinite;
            transform: translateX(0) translateY(0);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
          }

          @keyframes floatDown {
            0% {
              transform: translateY(-10px);
            }
            100% {
              transform: translateY(100vh);
            }
          }
        `}
            </style>

            <ToastContainer />
        </>
    );
}

export default App;
