<?php

namespace App\Http\Controllers\Admin\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\VanChuyen;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram;


class ThongBaoTelegramController extends Controller
{
    // H√†m g·ª≠i th√¥ng b√°o qua Telegram khi c√≥ ƒë∆°n h√†ng m·ªõi cho t·∫•t c·∫£ shipper
    public function thongBaoDonHangMoi(Request $request)
    {
        $vanChuyenId = $request->id_van_chuyen;
        // T√¨m th√¥ng tin v·∫≠n chuy·ªÉn v√† shipper
        $vanChuyen = VanChuyen::find($vanChuyenId);

        // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i
        if (!$vanChuyen) {
            return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.'], 404);
        }

        // Chu·∫©n b·ªã n·ªôi dung th√¥ng b√°o
        $message = "üì¶ ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c giao cho b·∫°n!\n";
        $message .= "M√£ v·∫≠n chuy·ªÉn: {$vanChuyen->ma_van_chuyen}\n";
        $message .= "Tr·∫°ng th√°i: {$vanChuyen->trang_thai_van_chuyen}\n";
        $message .= "COD: {$vanChuyen->tien_cod} VND\n";
        $message .= "Ghi ch√∫: {$vanChuyen->ghi_chu}\n";

        // L·∫•y danh s√°ch c√°c shipper c√≥ s·ªë ƒëi·ªán tho·∫°i v√† `chat_id`
        $shippers = User::whereNotNull('so_dien_thoai')
            ->whereNotNull('telegram_chat_id')
            ->get();

        // G·ª≠i th√¥ng b√°o t·ªõi t·ª´ng shipper
        foreach ($shippers as $shipper) {
            $this->sendTelegramMessage($shipper->telegram_chat_id, $message);
        }

        return response()->json(['message' => 'Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi t·∫•t c·∫£ shipper.']);
    }
    public function thongBaoHoanTatGiaoHang($id)
    {
        $vanChuyen = VanChuyen::find($id);

        $donHang = $vanChuyen->donHang;
        if (!$vanChuyen) {
            return response()->json([
                'message' => 'Kh√¥ng t√¨m th·∫•y ƒë∆°n v·∫≠n chuy·ªÉn.'
            ], 404);
        }

        if ($vanChuyen->trang_thai_van_chuyen != VanChuyen::TTVC_GHTC) {
            return response()->json([
                'message' => 'ƒê∆°n h√†ng ch∆∞a giao th√†nh c√¥ng.'
            ], 400);
        }

        $message = "‚úÖ ƒê∆°n h√†ng {$donHang->ma_don_hang} ƒë√£ ho√†n t·∫•t th√†nh c√¥ng!\n";
        $message .= "Kh√°ch h√†ng: {$donHang->ten_nguoi_dat_hang}\n";
        $message .= "T·ªïng ti·ªÅn: {$donHang->tong_tien_don_hang} VND\n";

        $shipper = User::findOrFail($vanChuyen->shipper_id);

        $this->sendTelegramMessage($shipper->telegram_chat_id, $message);

        return response()->json(['message' => 'Th√¥ng b√°o ho√†n t·∫•t ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c g·ª≠i.']);
    }

    // H√†m g·ª≠i tin nh·∫Øn qua Telegram
    private function sendTelegramMessage($chatId, $message)
    {
        $token = env('TELEGRAM_BOT_TOKEN');
        $url = "https://api.telegram.org/bot{$token}/sendMessage";

        $response = Http::post($url, [
            'chat_id' => $chatId,
            'text' => $message,
        ]);

        if ($response->successful()) {
            return $response->json();
        } else {
            // X·ª≠ l√Ω l·ªói khi g·ª≠i th·∫•t b·∫°i
            Log::error("G·ª≠i th√¥ng b√°o Telegram th·∫•t b·∫°i: " . $response->body());
            return ['error' => 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn qua Telegram'];
        }
    }
}
